name: Vulnerability Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install checkov gitpython

    - name: Clone Terraform code from GitHub
      run: |
        python -c "
import git
repo_url = 'https://github.com/pavankalyanvarikolu/terraform-infra.git'
local_path = 'terraform-infra'
if os.path.exists(local_path):
    print(f'Repository already cloned at {local_path}. Pulling latest changes...')
    git_repo = git.Repo(local_path)
    git_repo.remote().pull()
else:
    print(f'Cloning repository from {repo_url} into {local_path}...')
    git.Repo.clone_from(repo_url, local_path)
        "

    - name: Run Checkov to scan Terraform code
      run: |
        checkov -d terraform-infra --output-file-path checkov_report.json --output json

    - name: Generate remediation suggestions
      run: |
        python -c "
import json
import os

remediation_dir = 'remediations'
os.makedirs(remediation_dir, exist_ok=True)

with open('checkov_report.json', 'r') as f:
    vulnerabilities = json.load(f)

def determine_remediation(vulnerability):
    check_id = vulnerability.get('check_id', '')
    remediation_steps = ''

    if check_id == 'CKV_AWS_3':
        remediation_steps = (
            '1. Enable encryption at rest for your S3 bucket.\\n'
            '2. Update the Terraform configuration to include `server_side_encryption_configuration`.\\n'
        )
    elif check_id == 'CKV_AWS_41':
        remediation_steps = (
            '1. Restrict the security group ingress rule to specific IP addresses instead of 0.0.0.0/0.\\n'
            '2. Update the Terraform configuration to limit access to port 22 (SSH) only to trusted IP addresses.\\n'
        )
    else:
        remediation_steps = 'No specific remediation steps found for this vulnerability.'

    return remediation_steps

for i, vulnerability in enumerate(vulnerabilities):
    remediation = determine_remediation(vulnerability)
    remediation_file = os.path.join(remediation_dir, f'remediation_{i+1}.txt')

    with open(remediation_file, 'w') as f:
        f.write(f'Vulnerability: {vulnerability.get("check_name")}\\n')
        f.write(f'Resource: {vulnerability.get("resource")}\\n')
        f.write(f'File: {vulnerability.get("file_path")}\\n')
        f.write(f'Severity: {vulnerability.get("severity")}\\n\\n')
        f.write('Remediation Steps:\\n')
        f.write(remediation)

print(f'Remediation actions have been saved to the {remediation_dir} directory.')
        "

    - name: Upload results and remediations
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: vulnerability-results
        path: checkov_report.json

    - name: Upload remediations
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: remediation-results
        path: remediations/
